---
- name: Disable Swap, Install Containerd, and Kubernetes
  hosts: master_nodes
  become: yes

  tasks:

    - name: Disable swap
      command: swapoff -a
      ignore_errors: true

    - name: Comment out swap in fstab
      lineinfile:
        path: /etc/fstab
        regexp: '(\s+swap\s+)'
        line: '#\1'
        backup: yes

    - name: Load kernel modules
      copy:
        content: |
          overlay
          br_netfilter
        dest: /etc/modules-load.d/containerd.conf

    - name: Apply kernel modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter

    - name: Set kernel parameters for Kubernetes
      copy:
        content: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
        dest: /etc/sysctl.d/kubernetes.conf

    - name: Reload sysctl
      command: sysctl --system

    - name: Install required packages for containerd
      apt:
        name:
          - curl
          - gnupg2
          - software-properties-common
          - apt-transport-https
          - ca-certificates
        state: present
        update_cache: yes

    - name: Add Docker's official GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Set up Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
        state: present

    - name: Install containerd
      apt:
        name: containerd.io
        state: present
        update_cache: yes

    - name: Generate default containerd configuration
      shell: |
        containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1

    - name: Set SystemdCgroup to true in containerd config
      replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup\s*=\s*false'
        replace: 'SystemdCgroup = true'

    - name: Restart and enable containerd
      systemd:
        name: containerd
        enabled: yes
        state: restarted

    - name: Install Kubernetes components
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gpg
        state: present

    - name: Check if Kubernetes apt key is already present
      stat:
        path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      register: kubernetes_apt_key
      become: true

    - name: Add Kubernetes apt key
      shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      when: not kubernetes_apt_key.stat.exists
      become: true

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install kubelet, kubeadm, kubectl
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present

    - name: Hold kubelet, kubeadm, kubectl packages
      shell: |
        sudo apt-mark hold kubelet kubeadm kubectl



    - name: Initialize the Kubernetes cluster (first master)
      command: kubeadm init --pod-network-cidr=10.244.0.0/16
      register: kubeadm_init_result
      delegate_to: "{{ groups['master_nodes'][0] }}"
      run_once: true
      failed_when: kubeadm_init_result.rc != 0 and "'already initialized' not in kubeadm_init_result.stdout"

    # Generate and store the join command for additional master nodes
    - name: Generate the kubeadm join command for control plane
      command: kubeadm token create --print-join-command 
      register: join_command
      run_once: true
      delegate_to: "{{ groups['master_nodes'][0] }}"
      when: kubeadm_init_result.rc == 0

    # Create .kube directory on the first master
    - name: Create .kube directory on first master
      file:
        path: /root/.kube
        state: directory
        mode: '0700'
      delegate_to: "{{ groups['master_nodes'][0] }}"
      run_once: true

    # Copy admin.conf to .kube/config
    - name: Copy admin.conf to .kube/config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        mode: '0644'
        remote_src: yes 
      delegate_to: "{{ groups['master_nodes'][0] }}"
      run_once: true

    # Apply the Calico network plugin (only on the first master)
    - name: Apply Calico network plugin
      shell: |
        kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml
      delegate_to: "{{ groups['master_nodes'][0] }}"
      run_once: true
      when: kubeadm_init_result.rc == 0
      
    # Join the additional master nodes to the control plane
    - name: Join additional master nodes to the cluster
      shell: "{{ hostvars[groups['master_nodes'][0]].join_command.stdout }} --control-plane"
      when: inventory_hostname != groups['master_nodes'][0]

# ------------------------------------------------------------

- name: Setup Kubernetes Worker Nodes
  hosts: worker_nodes
  become: yes
  tasks:

    - name: Disable swap
      command: swapoff -a
      ignore_errors: true

    - name: Comment out swap in fstab
      lineinfile:
        path: /etc/fstab
        regexp: '(\s+swap\s+)'
        line: '#\1'
        backup: yes

    - name: Load kernel modules
      copy:
        content: |
          overlay
          br_netfilter
        dest: /etc/modules-load.d/containerd.conf

    - name: Apply kernel modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter

    - name: Set kernel parameters for Kubernetes
      copy:
        content: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
        dest: /etc/sysctl.d/kubernetes.conf

    - name: Reload sysctl
      command: sysctl --system

    - name: Install required packages for containerd
      apt:
        name:
          - curl
          - gnupg2
          - software-properties-common
          - apt-transport-https
          - ca-certificates
        state: present
        update_cache: yes

    - name: Add Docker's official GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Set up Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
        state: present

    - name: Install containerd
      apt:
        name: containerd.io
        state: present
        update_cache: yes

    - name: Generate default containerd configuration
      shell: |
        containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1

    - name: Set SystemdCgroup to true in containerd config
      replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup\s*=\s*false'
        replace: 'SystemdCgroup = true'

    - name: Restart and enable containerd
      systemd:
        name: containerd
        enabled: yes
        state: restarted

    - name: Install Kubernetes components
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gpg
        state: present

    - name: Add Kubernetes apt key
      shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes apt repository
      copy:
        content: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /'
        dest: /etc/apt/sources.list.d/kubernetes.list

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install kubelet, kubeadm, kubectl
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present

    - name: Hold kubelet, kubeadm, kubectl packages
      shell: |
        sudo apt-mark hold kubelet kubeadm kubectl

    - name: Join worker node to the cluster
      shell: "{{ hostvars[groups['master_nodes'][0]].join_command.stdout }}"
      when: ansible_hostname != groups['master_nodes'][0]
