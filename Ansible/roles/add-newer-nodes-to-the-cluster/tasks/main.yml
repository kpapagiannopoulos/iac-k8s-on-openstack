---
- name: Expand Kubernetes cluster with new nodes
  hosts: all
  become: true
  vars_files:
    - ../inventories/uat-env/vars/vars.yml

  pre_tasks:
    - name: Check if node already in cluster
      command: kubectl get node {{ inventory_hostname }}
      delegate_to: "{{ groups['control_plane_nodes'][0] }}"
      register: node_check
      ignore_errors: true
      environment:
        KUBECONFIG: /home/k8s/.kube/config
      run_once: false

  tasks:
    # ---------- Swap ----------
    - name: Disable swap
      command: swapoff -a
      ignore_errors: true

    - name: Comment out swap in fstab
      replace:
        path: /etc/fstab
        regexp: '^[^#].*\s+swap\s+.*$'
        replace: '# \g<0>'
        backup: yes

    # ---------- Kernel modules ----------
    - name: Load kernel modules file
      copy:
        content: |
          overlay
          br_netfilter
        dest: /etc/modules-load.d/containerd.conf
        mode: '0644'

    - name: Apply kernel modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop: [overlay, br_netfilter]

    - name: Set sysctl params
      copy:
        content: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
        dest: /etc/sysctl.d/kubernetes.conf
        mode: '0644'

    - name: Reload sysctl
      command: sysctl --system

    # ---------- Repos & keys ----------
    - name: Ensure /etc/apt/keyrings exists
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Remove old Docker repo file
      file:
        path: /etc/apt/sources.list.d/download_docker_com_linux_ubuntu.list
        state: absent

    - name: Fetch Docker GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /tmp/docker.gpg
        mode: '0644'

    - name: Dearmor Docker key
      command: "gpg --dearmor -o /etc/apt/keyrings/docker.gpg /tmp/docker.gpg"
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Add Docker repo
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
        filename: download_docker_com_linux_ubuntu
        state: present
        update_cache: no

    - name: Remove old Kubernetes repo files
      file:
        path: "{{ item }}"
        state: absent
      with_fileglob:
        - /etc/apt/sources.list.d/*kubernetes*.list

    - name: Ensure Kubernetes apt key
      stat:
        path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      register: kubernetes_apt_key

    - name: Download Kubernetes Release.key
      get_url:
        url: "https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version }}/deb/Release.key"
        dest: /tmp/k8s-release.key
        mode: '0644'
      when: not kubernetes_apt_key.stat.exists

    - name: Dearmor Kubernetes key
      command: "gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/k8s-release.key"
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      when: not kubernetes_apt_key.stat.exists

    - name: Add Kubernetes apt repo
      copy:
        dest: /etc/apt/sources.list.d/kubernetes.list
        mode: '0644'
        content: |
          deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version }}/deb/ /

    - name: apt update
      apt:
        update_cache: yes
        lock_timeout: 600

    # ---------- Packages ----------
    - name: Install base packages
      apt:
        name:
          - curl
          - gnupg2
          - software-properties-common
          - apt-transport-https
          - ca-certificates
          - gpg
        state: present
        update_cache: yes
        lock_timeout: 600

    - name: Install containerd and cri-tools
      apt:
        name:
          - containerd
          - runc
          - cri-tools
        state: present

    - name: Ensure /etc/containerd exists
      file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    - name: Check if containerd config exists
      stat:
        path: /etc/containerd/config.toml
      register: containerd_cfg

    - name: Generate default containerd config
      shell: containerd config default | tee /etc/containerd/config.toml >/dev/null
      when: not containerd_cfg.stat.exists
      args:
        executable: /bin/bash

    - name: Enable SystemdCgroup in containerd
      replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'

    - name: Restart containerd
      systemd:
        name: containerd
        state: restarted
        enabled: yes

    - name: Install kubelet/kubeadm/kubectl
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present

    - name: Hold kubelet/kubeadm/kubectl
      shell: apt-mark hold kubelet kubeadm kubectl

    - name: Configure kubelet for containerd
      copy:
        dest: /etc/default/kubelet
        content: |
          KUBELET_EXTRA_ARGS="--cgroup-driver=systemd --container-runtime-endpoint=unix:///run/containerd/containerd.sock"

    - name: Restart kubelet
      systemd:
        name: kubelet
        state: restarted
        enabled: true

    # ---------- Generate join commands (only on first master) ----------
    - name: Generate worker join command
      command: kubeadm token create --print-join-command
      register: join_command
      delegate_to: "{{ groups['control_plane_nodes'][0] }}"
      run_once: true

    - name: Upload certs for additional masters
      command: kubeadm init phase upload-certs --upload-certs
      register: kubeadm_certs
      delegate_to: "{{ groups['control_plane_nodes'][0] }}"
      run_once: true
      when: groups['control_plane_nodes'] | length > 1

    - name: Build control-plane join command
      set_fact:
        join_command_cp: "{{ join_command.stdout }} --control-plane --certificate-key {{ kubeadm_certs.stdout_lines[-1] }}"
      run_once: true
      when: groups['control_plane_nodes'] | length > 1

    # ---------- Join new masters ----------
    - name: Join new master node
      command: "{{ hostvars[groups['control_plane_nodes'][0]].join_command_cp }} --cri-socket unix:///run/containerd/containerd.sock"
      when:
        - "'control_plane_nodes' in group_names"
        - inventory_hostname != groups['control_plane_nodes'][0]
        - node_check.rc != 0

    # ---------- Join new workers ----------
    - name: Join new worker node
      command: "{{ hostvars[groups['control_plane_nodes'][0]].join_command.stdout }} --cri-socket unix:///run/containerd/containerd.sock"
      when:
        - "'worker_nodes' in group_names"
        - node_check.rc != 0

    - name: Label worker node
      command: kubectl label node {{ inventory_hostname }} node-role.kubernetes.io/worker= --overwrite
      delegate_to: "{{ groups['control_plane_nodes'][0] }}"
      when:
        - "'worker_nodes' in group_names"
        - node_check.rc != 0
      environment:
        KUBECONFIG: /home/k8s/.kube/config
