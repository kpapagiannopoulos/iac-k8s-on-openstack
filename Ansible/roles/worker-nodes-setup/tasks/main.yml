
 # ---------- Swap ----------
- name: Disable swap on worker nodes
  command: swapoff -a
  ignore_errors: true
  become: true

- name: Comment out swap in fstab on worker nodes
  replace:
    path: /etc/fstab
    regexp: '^[^#].*\s+swap\s+.*$'
    replace: '# \g<0>'
    backup: yes
  become: true

# ---------- Kernel modules / sysctl ----------
- name: Load kernel modules file
  copy:
    content: |
      overlay
      br_netfilter
    dest: /etc/modules-load.d/containerd.conf
    mode: '0644'
  become: true

- name: Apply kernel modules
  modprobe:
    name: "{{ item }}"
    state: present
  loop: [overlay, br_netfilter]
  become: true

- name: Set Kubernetes sysctl params
  copy:
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward = 1
    dest: /etc/sysctl.d/kubernetes.conf
    mode: '0644'
  become: true

- name: Reload sysctl
  command: sysctl --system
  become: true

# ---------- Repos & keys (do this BEFORE any apt update) ----------
- name: Ensure /etc/apt/keyrings exists
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
  become: true

# -- Docker: remove duplicates and re-add with signed-by --
- name: Remove any existing Docker repo file to avoid duplicates
  file:
    path: /etc/apt/sources.list.d/download_docker_com_linux_ubuntu.list
    state: absent
  become: true

- name: Fetch Docker GPG key
  get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /tmp/docker.gpg
    mode: '0644'
  become: true

- name: Dearmor Docker key to keyring
  command: "gpg --dearmor -o /etc/apt/keyrings/docker.gpg /tmp/docker.gpg"
  args:
    creates: /etc/apt/keyrings/docker.gpg
  become: true

- name: Use Docker repo with signed-by (no update yet)
  apt_repository:
    repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
    filename: download_docker_com_linux_ubuntu
    state: present
    update_cache: no
  become: true

# -- Kubernetes: clean old entries, add per-minor repo with keyring --
- name: Remove any old/incorrect Kubernetes repo files
  file:
    path: "{{ item }}"
    state: absent
  with_fileglob:
    - /etc/apt/sources.list.d/*kubernetes*.list
  become: true

- name: Check if Kubernetes apt key is already present
  stat:
    path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  register: kubernetes_apt_key
  become: true

- name: Download Kubernetes Release.key (per-minor)
  get_url:
    url: "https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version }}/deb/Release.key"
    dest: /tmp/k8s-release.key
    mode: '0644'
  when: not kubernetes_apt_key.stat.exists
  become: true

- name: Dearmor Kubernetes key to keyring
  command: "gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/k8s-release.key"
  args:
    creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  when: not kubernetes_apt_key.stat.exists
  become: true

- name: Set permissions on Kubernetes keyring
  file:
    path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    mode: '0644'
  become: true

- name: Add/Update Kubernetes apt repository (signed-by)
  copy:
    dest: /etc/apt/sources.list.d/kubernetes.list
    mode: '0644'
    content: |
      deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version }}/deb/ /
  become: true


- name: apt update after repos are configured
  apt:
    update_cache: yes
    lock_timeout: 600
  become: true


# ---------- Base packages & containerd ----------
- name: Install required packages for containerd on master nodes
  apt:
    name:
      - curl
      - gnupg2
      - software-properties-common
      - apt-transport-https
      - ca-certificates
      - gpg
    state: present
    update_cache: yes
    lock_timeout: 600
  become: true

- name: Install containerd and cri-tools
  apt:
    name:
      - containerd
      - runc
      - cri-tools
    state: present
    update_cache: yes
    lock_timeout: 600
  become: true


# 1) Ο φάκελος να υπάρχει
- name: Ensure /etc/containerd directory exists
  file:
    path: /etc/containerd
    state: directory
    mode: '0755'
  become: true

# 2) Αν δεν υπάρχει config.toml, φτιάξ' τον από τα defaults
- name: Check if /etc/containerd/config.toml exists
  stat:
    path: /etc/containerd/config.toml
  register: containerd_cfg
  become: true

- name: Generate default containerd config (if missing)
  shell: |
    containerd config default | tee /etc/containerd/config.toml >/dev/null
  when: not containerd_cfg.stat.exists
  args:
    executable: /bin/bash
  become: true

- name: Enable SystemdCgroup in containerd
  replace:
    path: /etc/containerd/config.toml
    regexp: 'SystemdCgroup = false'
    replace: 'SystemdCgroup = true'
  become: true

- name: Restart containerd (apply SystemdCgroup)
  systemd:
    name: containerd
    state: restarted
    enabled: yes
  become: true



- name: Wait for containerd socket
  wait_for:
    path: /run/containerd/containerd.sock
    state: present
    timeout: 30
  become: true

- name: Check CRI endpoint
  command: crictl --runtime-endpoint=unix:///var/run/containerd/containerd.sock info
  register: crictl_info
  changed_when: false
  failed_when: crictl_info.rc != 0
  become: true

# handler
- name: Restart containerd
  systemd:
    name: containerd
    state: restarted
    enabled: yes
  become: true


- name: Install kubelet, kubeadm, kubectl on worker nodes
  apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present

- name: Hold kubelet, kubeadm, kubectl packages on worker nodes
  shell: |
    sudo apt-mark hold kubelet kubeadm kubectl

- name: Configure kubelet for containerd
  copy:
    dest: /etc/default/kubelet
    content: |
      KUBELET_EXTRA_ARGS="--cgroup-driver=systemd --container-runtime-endpoint=unix:///run/containerd/containerd.sock"
  become: true

- name: Restart kubelet to apply config
  systemd:
    name: kubelet
    state: restarted
    enabled: true
  become: true



- name: Enable and start kubelet service on worker nodes
  systemd:
    name: kubelet
    enabled: yes
    state: started

# # Task to join the worker node to the cluster
# - name: Join worker node to the cluster
#   shell: "{{ hostvars[groups['control_plane_nodes'][0]].join_command.stdout }}"
#   when: hostvars[groups['control_plane_nodes'][0]].join_command is defined and hostvars[groups['control_plane_nodes'][0]].join_command.stdout is defined

- name: Join worker node to the cluster
  shell: "{{ hostvars[groups['control_plane_nodes'][0]].join_command.stdout }} --cri-socket unix:///run/containerd/containerd.sock"
  when: hostvars[groups['control_plane_nodes'][0]].join_command is defined and hostvars[groups['control_plane_nodes'][0]].join_command.stdout is defined
  become: true


# - name: Label node as worker
#   command: kubectl label node {{ inventory_hostname }} node-role.kubernetes.io/worker= --overwrite
#   delegate_to: "{{ groups['control_plane_nodes'][0] }}"
#   run_once: false
#   when: "'worker_nodes' in group_names"
#   become: true
